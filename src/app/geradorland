"use client"

import React, { useState, useCallback } from 'react';
// Ícones DollarSign, Target e Zap foram adicionados aqui para resolver os ReferenceErrors
import { Sparkles, Loader2, Maximize2, Minimize2, CheckCircle, AlertTriangle, MessageSquare, DollarSign, Target, Zap } from "lucide-react";

// Definição dos Planos para simular a lógica de limite de caracteres
const PLAN_LIMITS = {
    free: { name: 'Grátis', limit: 2000, price: 'R$ 0' },
    essential: { name: 'Essencial', limit: 5000, price: 'R$ 49,90' },
    unlimited: { name: 'Ilimitado', limit: Infinity, price: 'R$ 99,90' },
};

// ====================================================================
// Componentes Simples (Simulação de shadcn/ui)
// ====================================================================

// @ts-ignore
const Button = ({ children, className = '', disabled = false, ...props }) => (
    <button 
        className={`inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors h-10 px-4 py-2 
        ${disabled ? 'bg-gray-500 cursor-not-allowed opacity-60' : 'bg-primary text-primary-foreground shadow hover:bg-primary/90'} ${className}`} 
        disabled={disabled} 
        {...props}
    >
        {children}
    </button>
);

// @ts-ignore
const Card = ({ children, className = '', ...props }) => (
    <div className={`rounded-xl border bg-gray-800/70 border-gray-700 shadow-xl ${className}`} {...props}>
        {children}
    </div>
);

// @ts-ignore
const CardContent = ({ children, className = '', ...props }) => (
    <div className={`p-6 ${className}`} {...props}>
        {children}
    </div>
);

// Função para simular o fetch com backoff (para evitar throttling)
async function fetchWithBackoff(url, options, retries = 5, delay = 1000) {
    for (let i = 0; i < retries; i++) {
        try {
            const response = await fetch(url, options);
            if (response.status !== 429) { // 429 is Too Many Requests
                return response;
            }
        } catch (error) {
            // Log error silently, but continue retrying for potential transient network issues
        }
        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, i)));
    }
    throw new Error("API request failed after multiple retries.");
}


export default function LandingPageGenerator() {
    // Estado para a entrada do usuário
    const [prompt, setPrompt] = useState('');
    // Estado para o conteúdo gerado
    const [generatedContent, setGeneratedContent] = useState('');
    // Estado para o carregamento
    const [isLoading, setIsLoading] = useState(false);
    // Estado para simular o plano atual do usuário (mude aqui para testar os limites)
    const [currentPlan, setCurrentPlan] = useState(PLAN_LIMITS.unlimited); 
    // Estado para erros
    const [error, setError] = useState('');

    const currentLimit = currentPlan.limit;
    const charCount = prompt.length;
    const isOverLimit = currentLimit !== Infinity && charCount > currentLimit;

    // Constantes para a API do Gemini
    const apiKey = ""; 
    // Usamos o modelo Flash por ser rápido e eficiente para tarefas de geração de texto/código
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    /**
     * Função principal para chamar a API do Gemini.
     * A instrução de sistema é crucial para ensinar o Gemini sobre o seu negócio.
     */
    const generateLandingPage = useCallback(async () => {
        if (!prompt || isOverLimit) {
            setError('Por favor, insira uma descrição válida e respeite o limite de caracteres do seu plano.');
            return;
        }

        setIsLoading(true);
        setGeneratedContent('');
        setError('');

        // Instrução de Sistema: Define o papel do Gemini
        const systemPrompt = `
            Você é um especialista em marketing digital e desenvolvedor frontend sênior.
            Sua tarefa é gerar o código COMPLETO e FUNCIONAL de uma Landing Page de ALTA CONVERSÃO.
            1. O código DEVE ser um único arquivo JSX/TSX (React Component) chamado 'GeneratedLandingPage'.
            2. Use a estrutura de componentes React e o Tailwind CSS para o estilo (classes CSS devem ser inline ou definidas no className).
            3. O conteúdo deve ser persuasivo, focado em benefícios e conter CTAs claros.
            4. Não use imports de ícones, defina-os como inline SVG ou use emojis.
            5. O estilo deve ser moderno, responsivo e seguir um tema DARK MODE, semelhante ao SiteBoost Brasil.
            6. Não inclua texto introdutório, nem Markdown (\`\`\`react) no resultado. Entregue apenas o código React.
        `;

        const userQuery = `Gere uma landing page de alta conversão para o seguinte produto/briefing: "${prompt}"`;

        const payload = {
            contents: [{ parts: [{ text: userQuery }] }],
            systemInstruction: {
                parts: [{ text: systemPrompt }]
            },
        };

        try {
            const response = await fetchWithBackoff(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();
            const text = result.candidates?.[0]?.content?.parts?.[0]?.text || 'Erro: Não foi possível gerar o conteúdo. Tente ser mais específico.';
            setGeneratedContent(text);

        } catch (err) {
            console.error("Erro na API:", err);
            setError('Falha na comunicação com a IA. Tente novamente mais tarde ou verifique sua conexão.');
        } finally {
            setIsLoading(false);
        }
    }, [prompt, isOverLimit, apiUrl]);

    // Função para alterar o plano (apenas para demonstração)
    const handlePlanChange = (planKey) => {
        setCurrentPlan(PLAN_LIMITS[planKey]);
        setPrompt('');
        setError('');
        setGeneratedContent('');
    };

    return (
        <div className="min-h-screen bg-gray-900 text-white p-6 md:p-12 font-sans">
            
            <header className="max-w-4xl mx-auto text-center mb-12">
                <Sparkles className="w-12 h-12 text-purple-400 mx-auto mb-4" />
                <h1 className="4xl md:text-5xl font-black mb-2">
                    Gerador <span className="text-purple-400">Gemini</span> de Landing Pages
                </h1>
                <p className="text-gray-400 text-lg">
                    Descreva seu produto e nossa IA cria o código de alta conversão em segundos.
                </p>
            </header>

            <div className="max-w-5xl mx-auto space-y-8">
                {/* Seleção de Plano (Simulação) */}
                <Card className="p-4 md:p-6 mb-8 border-l-4 border-purple-500">
                    <h2 className="text-xl font-bold mb-3 flex items-center">
                        <DollarSign className="w-5 h-5 mr-2 text-yellow-400" />
                        Seu Plano Atual: <span className="ml-2 text-purple-400">{currentPlan.name}</span>
                    </h2>
                    <div className="flex flex-wrap gap-4">
                        {Object.keys(PLAN_LIMITS).map(key => (
                            <Button
                                key={key}
                                onClick={() => handlePlanChange(key)}
                                className={`
                                    py-1 px-4 text-xs font-semibold rounded-full 
                                    ${currentPlan.name === PLAN_LIMITS[key].name 
                                        ? 'bg-purple-600 border border-purple-400' 
                                        : 'bg-gray-700 hover:bg-gray-600 text-gray-300'}
                                `}
                            >
                                {PLAN_LIMITS[key].name} ({PLAN_LIMITS[key].price})
                            </Button>
                        ))}
                    </div>
                </Card>

                {/* Área de Prompt e Limite de Caracteres */}
                <Card>
                    <CardContent>
                        <h2 className="text-2xl font-bold mb-4 flex items-center">
                            <MessageSquare className="w-6 h-6 mr-2 text-cyan-400" />
                            Descrição do Produto/Briefing
                        </h2>
                        
                        <textarea
                            className={`w-full h-32 p-4 text-base bg-gray-700/50 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 border border-transparent 
                                ${isOverLimit ? 'border-red-500' : ''}`}
                            value={prompt}
                            onChange={(e) => setPrompt(e.target.value)}
                            placeholder="Ex: Crie uma landing page para um curso online sobre 'Marketing no TikTok', focado em jovens empreendedores, com preço de R$ 97 e garantia de 7 dias."
                            disabled={isLoading}
                        />

                        <div className="flex justify-between items-center mt-3 text-sm">
                            <div className={`font-semibold ${isOverLimit ? 'text-red-400' : 'text-gray-400'}`}>
                                Caracteres: {charCount} / {currentLimit === Infinity ? 'Ilimitado' : currentLimit.toLocaleString('pt-BR')}
                            </div>
                            {isOverLimit && (
                                <p className="text-red-400 flex items-center">
                                    <AlertTriangle className="w-4 h-4 mr-1" /> Limite do Plano Excedido!
                                </p>
                            )}
                        </div>

                        <Button 
                            onClick={generateLandingPage}
                            disabled={isLoading || isOverLimit || charCount === 0}
                            className="mt-6 w-full py-3 text-lg bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-xl shadow-purple-500/30"
                        >
                            {isLoading ? (
                                <><Loader2 className="mr-2 h-5 w-5 animate-spin" /> Gerando Código...</>
                            ) : (
                                <><Zap className="mr-2 h-5 w-5" /> GERAR LANDING PAGE COM GEMINI</>
                            )}
                        </Button>
                    </CardContent>
                </Card>

                {/* Área de Resultado */}
                <Card>
                    <CardContent>
                        <h2 className="text-2xl font-bold mb-4 flex items-center">
                            <Target className="w-6 h-6 mr-2 text-green-400" />
                            Resultado Gerado (Código React)
                        </h2>
                        {error && (
                            <div className="bg-red-900/50 text-red-300 p-4 rounded-lg flex items-center mb-4">
                                <AlertTriangle className="w-5 h-5 mr-2" />
                                <p className="text-sm">{error}</p>
                            </div>
                        )}
                        <pre className="relative bg-gray-900 p-4 rounded-lg overflow-x-auto text-sm">
                            {generatedContent ? (
                                <code className="text-gray-200 whitespace-pre-wrap">{generatedContent}</code>
                            ) : (
                                <code className="text-gray-500">// O código gerado pela IA aparecerá aqui. Use a pré-visualização para ver o resultado final.</code>
                            )}
                        </pre>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
